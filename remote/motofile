#!/usr/bin/env python
""" motofile: Get or put files on a YASNAC ERC series robot """
import argparse
import sys
import os

import erc


def list_remote_files(connection):
    """ Return a list of files on the remote ERC device """
    return connection.execute_command("RJDIR *")


def delete_remote_file(connection, filename):
    """ Delete the named file from the given ERC device """
    jobname = erc.filename_to_jobname(filename)
    return connection.execute_command("DELETE {}".format(jobname))


def main():
    """
    primary function for command-line execution. return an exit status integer
    or a bool type (where True indicates successful exection)
    """
    argp = argparse.ArgumentParser(description=(
        "Get or put files on a YASNAC ERC series robot"))
    argp.add_argument('mode', choices=['list', 'get', 'put', 'delete'], help=(
        'Specifies the file operation to be performed: "list" prints a '
        'list of files on the robot, "get" or "put" transfer the named file, '
        '"delete" removes the named file from the robot'))
    argp.add_argument('filename', nargs="?", help=(
        "The name of the file to get, put, or delete"))
    argp.add_argument('--overwrite', action="store_true", help=(
        "Allow new files to overwrite existing files with the same name"))
    argp.add_argument('-s', '--separator', nargs="?", default="\n", help=(
        "When listing files, print them separated by the given argument, or "
        "null if you specify 0. The default separator is newline."))
    argp.add_argument('-d', '--debug', action="store_true", help=(
        "Enable transaction debugging output"))
    args = argp.parse_args()

    erc.DEBUG = args.debug
    if args.separator == "0":
        args.separator = "\0"

    # Sanity checking
    if args.mode in ('get', 'put', 'delete'):
        if not args.filename:
            print "You must specify a file/job name to {}".format(args.mode)

        if args.mode != "delete":
            if os.path.splitext(args.filename)[1] not in ('.JBI', '.JBR'):
                print ("You must specify a full filename, including the .JBI "
                       "or .JBR filename extensions for get/put operations")
                return False

            if args.mode == 'get':
                if os.path.exists(args.filename) and not args.overwrite:
                    print "File already exists; overwrite is not enabled"
                    return False

            elif args.mode == 'put':
                if not os.path.exists(args.filename):
                    print "File does not exist"
                    return False

    # Sanity doing
    robot = erc.ERC()

    if args.mode == 'get':
        print "getting " + args.filename
        result = robot.get_file(args.filename)
        if result:
            print result
            return False
        return True

    if args.mode == "put":
        if args.overwrite:
            jobname = erc.filename_to_jobname(args.filename)
            remote_files = list_remote_files(robot)
            if jobname in remote_files:
                print ('A job named "{}" already exists on the robot, it '
                       'will now be deleted to enable this '
                       'upload').format(jobname)
                delete_remote_file(robot, args.filename)
        print "putting " + args.filename
        result = robot.put_file(args.filename)
        if result:
            print result
            return False
        return True

    if args.mode == "list":
        print args.separator.join(list_remote_files(robot))
        return True

    if args.mode == "delete":
        jobname = erc.filename_to_jobname(args.filename)
        remote_files = list_remote_files(robot)
        if jobname not in remote_files:
            print 'job "{}" does not exist on the robot'.format(jobname)
            return False
        print "deleting " + args.filename
        result = delete_remote_file(robot, args.filename)
        if result:
            print result
            return False
        return True

    print "Unknown mode {}".format(args.mode)
    return False


if __name__ == '__main__':
    RESULT = main()
    sys.exit(int(not RESULT if isinstance(RESULT, bool) else RESULT))
